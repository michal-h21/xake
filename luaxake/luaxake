#!/usr/bin/env texlua
kpse.set_program_name "luatex"

logging = require("make4ht-logging")
local log = logging.new("luaxake")
local lapp = require "lapp-mk4"
local version = "{{version}}"

local option_text = [[ 
Luaxake: build system for Ximera documents
Usage: 
$ texlua luaxake <dir>

Options: 
-c,--config  (default ximera.cfg)  TeX4ht config file
-h,--help                          Print help message
-l,--loglevel (default status)     Set log level.
                                   possible values: debug, info, status, warning, error, fatal
-s,--settings  (default none)      Luaxake settings script
-v,--version                       Version info
<dir>  (default .)                 Document root directory
]]

--- @class args
--- @field config string TeX4ht config file
--- @field help boolean Print help message
--- @field settings string Luaxake settings script
--- @field version boolean Print version
--- @field dir string Document root directory
local args = lapp(option_text)

if args.version then
  print("Luaxake version: " .. (version == "{{version}}" and "devel" or version))
  os.exit()
end

logging.set_level(args.loglevel)

--- @class DOM_Object 
--- Dummy type declaration for LuaXML DOM object, to prevent error messages from language server
--- @field query_selector function get all elements that match a given CSS selector
--- @field get_children function 
--- @field get_text function 
--- @field get_attribute function
--- @field remove_node function

--- @class compiler 
--- @field command string command template
--- @field check_log? boolean should we check the log file for errors?
--- @field check_file? boolean execute command only if the output file exists
--- @field status? number expected status code from the command
--- @field process_html? boolean run HTML post-processing

--- @class config
--- @field output_formats [string] list of output format extensions
--- @field documentclass_lines number on how many lines in TeX files we should try to look for \documentclass
--- @field compilers {string: compiler}
--- @field compile_sequence [string] sequence  of compiler names to be executed
--- @field clean [string] list of extensions of temp files to be removed after the compilation
--- @field config_file string TeX4ht config file 

config = {
  -- list of extensions of output files
  output_formats = {"html", "pdf", "sagetex.sage"},
  -- number of lines in tex files where we should look for \documentclass
  documentclass_lines = 30,
  compilers = {
    pdf = {
      -- this doesn't work well
      -- command = 'pdflatex -interaction=nonstopmode  -file-line-error -shell-escape  "\\PassOptionsToClass{tikzexport}{ximera}\\PassOptionsToClass{xake}{ximera}\\PassOptionsToClass{xake}{xourse}\\nonstopmode\\input{@{filename}}"',
      command = 'pdflatex -interaction=nonstopmode  -file-line-error -shell-escape  "\\PassOptionsToClass{xake}{ximera}\\PassOptionsToClass{xake}{xourse}\\input{@{filename}}"',
      check_log = true, -- check log
      status = 0 -- check that the latex command return 0
    },
    html = {
      command = "make4ht -f html5+dvisvgm_hashes -c @{config_file} -sm draft @{filename}",
      check_log = true, -- check log
      status = 0, -- check that the latex command return 0
      process_html = true,
    },
    ["sagetex.sage"] = {
      command = "sage @{output_file}",
      check_log = true, -- check log
      check_file = true, -- check if the sagetex.sage file exists
      status = 0 -- check that the latex command return 0
    },

  },
  compile_sequence = {"pdf", "sagetex.sage", "pdf", "html"},
  clean = {
    "aux",
    "4ct",
    "4tc",
    "oc",
    "md5",
    "dpth",
    "out",
    "jax",
    "idv",
    "lg",
    "tmp",
    "xref",
    "log",
    "auxlock",
    "dvi",
    "scmd",
    "sout",
  }

}


local files = require "luaxake-files"
local compile = require "luaxake-compile"

config.config_file = args.config

if args.settings~="none" then
  -- config file can be a Lua script, which should only set properties for the config table
  local configlib = require "luaxake-config"
  log:debug("Using settings file: " .. args.settings)
  configlib.update_config(args.settings, config)
end


config.dir = args.dir


log:debug("Processing directory: " .. config.dir)

local to_be_compiled, tex_files = files.needing_compilation(config.dir, config.output_formats, config.compilers)

if #to_be_compiled > 0 then
  for _, meta in ipairs(to_be_compiled) do
    log:status("updated file " .. meta.absolute_path)
    local statuses = compile.compile(meta, config.compilers, config.compile_sequence)
    compile.print_errors(statuses)
    compile.clean(meta, config.clean)
  end
else
  log:status("Everything up-to-date")
end


