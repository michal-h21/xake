#!/usr/bin/env texlua
kpse.set_program_name "luatex"

logging = require("make4ht-logging")
local log = logging.new("luaxake")


--- @class compiler 
--- @field command string command template
--- @field check_log? boolean should we check the log file for errors?
--- @field check_file? boolean execute command only if the output file exists
--- @field status? number expected status code from the command

--- @class config
--- @field output_formats [string] list of output format extensions
--- @field documentclass_lines number on how many lines in TeX files we should try to look for \documentclass
--- @field compilers {string: compiler}
--- @field compile_sequence [string] sequence  of compiler names to be executed
--- @field clean [string] list of extensions of temp files to be removed after the compilation

config = {
  -- list of extensions of output files
  output_formats = {"html", "pdf", "sagetex.sage"},
  -- number of lines in tex files where we should look for \documentclass
  documentclass_lines = 30,
  compilers = {
    pdf = {
      -- this doesn't work well
      -- command = 'pdflatex -interaction=nonstopmode  -file-line-error -shell-escape  "\\PassOptionsToClass{tikzexport}{ximera}\\PassOptionsToClass{xake}{ximera}\\PassOptionsToClass{xake}{xourse}\\nonstopmode\\input{@{filename}}"',
      command = 'pdflatex -interaction=nonstopmode  -file-line-error -shell-escape  "\\PassOptionsToClass{xake}{ximera}\\PassOptionsToClass{xake}{xourse}\\input{@{filename}}"',
      check_log = true, -- check log
      status = 0 -- check that the latex command return 0
    },
    html = {
      command = "make4ht -f html5+dvisvgm_hashes -c ximera.cfg -sm draft @{filename}",
      check_log = true, -- check log
      status = 0 -- check that the latex command return 0
    },
    ["sagetex.sage"] = {
      command = "sage @{output_file}",
      check_log = true, -- check log
      check_file = true, -- check if the sagetex.sage file exists
      status = 0 -- check that the latex command return 0
    },

  },
  compile_sequence = {"pdf", "sagetex.sage", "pdf", "html"},
  clean = {
    "aux",
    "4ct",
    "4tc",
    "oc",
    "md5",
    "dpth",
    "out",
    "jax",
    "idv",
    "lg",
    "tmp",
    "xref",
    "log",
    "auxlock",
    "dvi",
    "scmd",
    "sout",
  }

}


local files = require "luaxake-files"
local compile = require "luaxake-compile"


local dir = arg[1] or "."


local to_be_compiled, tex_files = files.needing_compilation(dir, config.output_formats, config.compilers)

if #to_be_compiled > 0 then
  for _, meta in ipairs(to_be_compiled) do
    log:status("updated file " .. meta.absolute_path)
    local statuses = compile.compile(meta, config.compilers, config.compile_sequence)
    compile.print_errors(statuses)
    compile.clean(meta, config.clean)
  end
else
  log:status("Everything up-to-date")
end


